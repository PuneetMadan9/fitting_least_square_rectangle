# -*- coding: utf-8 -*-
"""My_alogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VyxJGLfKkzFuN-MF_38J-Y_RqrZ19bVz

# Least square rectangle
"""

import torch
import numpy as np
import matplotlib.pyplot as plt

import cv2

import matplotlib.pyplot as plt

def plot_graph(X,Y, slopes,constants):
  plt.plot(X,Y,"go")
  
  def abline(slope, intercept):
    """Plot a line from slope and intercept"""
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '--')

  abline(float(slopes[0]),float(constants[0]))
  abline(float(slopes[0]),float(constants[2]))
  abline(float(slopes[1]),float(constants[1]))
  abline(float(slopes[1]),float(constants[3]))  
  plt.show()

points = torch.tensor([[0,2],[2,0],[0.5,1.5],[1,1],[2,2],[3,3],[3,0.8],[2.5,3.5],[2,4],[3,1.5],[0,2.3],[1.5,3],[1,3]])

Y = points[:,1]
X = points[:,0]
learning_rate = 0.01

epochs = 10000
n = X.shape[0]

import cv2
import numpy as np

rect = cv2.minAreaRect(np.array(points))
m = np.tan(np.pi*rect[2]/180)
slope = torch.tensor([[m]],requires_grad=True)
box = cv2.boxPoints(rect)

c0 = box[0][1] - (m*box[0][0])
c1 = box[0][1] + (box[0][0]/m)
c2 = box[2][1] - (m* box[2][0])
c3 = box[2][1] + (box[2][0]/m)

constants = torch.tensor([[c0],[c1],[c2],[c3]],requires_grad=True)
# slope = torch.rand([1,1],requires_grad=True)
# constants = torch.rand([4,1],requires_grad=True)

for i in range(epochs):

  slopes = torch.cat((slope,-1/slope) ,0)
  num  = abs(torch.cat((Y - slopes*X, Y - slopes*X), 0) - constants)
  den = torch.cat((torch.sqrt(1 + slopes*slopes), torch.sqrt(1 + slopes*slopes)), 0)
  distances = num/den
  dists_min = torch.amin(distances,0).sum()/n
  dists_min.backward()

  if i % 1000 == 0:
    print(i) 

  if i%1000==0:
    plot_graph(X,Y, slopes,constants)

  with torch.no_grad():
      slope -= learning_rate * slope.grad
      constants -= learning_rate *10* constants.grad
      
      slope.grad.zero_()
      constants.grad.zero_()

